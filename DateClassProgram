#include <iostream>
#include <string>

class Date {
private:
    int month;
    int day;
    int year;

    // Helper function to check if a year is a leap year
    bool isLeapYear(int y) const {
        return (y % 4 == 0 && (y % 100 != 0 || y % 400 == 0));
    }

    // Helper function to get the last valid day of a month
    int lastDay(int m, int y) const {
        if (m == 2) return isLeapYear(y) ? 29 : 28;
        int daysInMonth[] = { 31, 28, 31, 30, 31, 30, 31, 31, 30, 31, 30, 31 };
        return daysInMonth[m - 1];
    }

public:
    // Constructor to initialize the date
    Date(int m = 1, int d = 1, int y = 1900) {
        year = (y > 0) ? y : 1900; // Ensure year is valid

        if (m < 1 || m > 12) {
            std::cout << "Invalid month provided. Defaulting to January.\n";
            month = 1;
        } else {
            month = m;
        }

        // Validate day, adjust if out of range
        int maxDay = lastDay(month, year);
        if (d < 1 || d > maxDay) {
            std::cout << "Invalid day provided. Setting day to last valid day of the month (" << maxDay << ").\n";
            day = maxDay;
        } else {
            day = d;
        }
    }

    // Function to print the date in MM/DD/YYYY format
    std::string printDate1() const {
        return std::to_string(month) + "/" + std::to_string(day) + "/" + std::to_string(year);
    }

    // Function to print the date in Month DD, YYYY format
    std::string printDate2() const {
        const std::string months[] = { "", "January", "February", "March", "April", "May", "June", "July", "August", "September", "October", "November", "December" };
        return months[month] + " " + std::to_string(day) + ", " + std::to_string(year);
    }
};

int main() {
    // Test cases
    Date date1(2, 29, 2020);  // Valid leap year date
    std::cout << "Valid Date (Leap Year): " << date1.printDate1() << " | " << date1.printDate2() << std::endl;

    Date date2(2, 30, 2020);  // Invalid day in a leap year
    std::cout << "Adjusted Invalid Date: " << date2.printDate1() << " | " << date2.printDate2() << std::endl;

    Date date3(13, 15, 2022); // Invalid month
    std::cout << "Invalid Month: " << date3.printDate1() << " | " << date3.printDate2() << std::endl;

    Date date4(4, 31, 2023); // Invalid day (April has only 30 days)
    std::cout << "Invalid Day: " << date4.printDate1() << " | " << date4.printDate2() << std::endl;

    return 0;
}

